# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/premailer-rails/all/premailer-rails.rbi
#
# premailer-rails-1.11.1

class Premailer
end
module Premailer::Rails
  def self.config; end
  def self.config=(arg0); end
  def self.register_interceptors; end
end
module Premailer::Rails::CSSLoaders
end
module Premailer::Rails::CSSLoaders::FileSystemLoader
  def asset_filename(filename); end
  def file_name(url); end
  def load(url); end
  def relative_url_root; end
  extend Premailer::Rails::CSSLoaders::FileSystemLoader
end
module Premailer::Rails::CSSLoaders::AssetPipelineLoader
  def asset_pipeline_present?; end
  def file_name(url); end
  def load(url); end
  extend Premailer::Rails::CSSLoaders::AssetPipelineLoader
end
module Premailer::Rails::CSSLoaders::NetworkLoader
  def asset_host(url); end
  def asset_host_present?; end
  def load(url); end
  def uri_for_url(url); end
  extend Premailer::Rails::CSSLoaders::NetworkLoader
end
module Premailer::Rails::CSSHelper
  def cache; end
  def cache=(arg0); end
  def cache_enabled?; end
  def css_for_doc(doc); end
  def css_for_url(url); end
  def css_urls_in_doc(doc); end
  def find_strategy(key); end
  def load_css(url); end
  def load_css_with_cache(url); end
  extend Premailer::Rails::CSSHelper
end
class Premailer::Rails::CSSHelper::FileNotFound < StandardError
end
class Premailer::Rails::CustomizedPremailer < Premailer
  def initialize(html); end
end
class Premailer::Rails::Hook
  def generate_alternative_part; end
  def generate_html_part; end
  def generate_html_part_replacement; end
  def generate_text_part; end
  def generate_text_part?; end
  def html_part; end
  def initialize(message); end
  def message; end
  def message_contains_html?; end
  def perform; end
  def premailer; end
  def pure_html_message?; end
  def remove_skip_premailer_header; end
  def replace_html_part(new_part); end
  def replace_in_pure_html_message(new_part); end
  def replace_part_in_list(parts_list, old_part, new_part); end
  def self.delivering_email(message); end
  def self.perform(message); end
  def self.previewing_email(message); end
  def skip_premailer_header_present?; end
end
class Premailer::Rails::Railtie < Rails::Railtie
end
