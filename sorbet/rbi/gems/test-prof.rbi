# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/test-prof/all/test-prof.rbi
#
# test-prof-0.10.2

module TestProf
  def self.activate!(env_var, val); end
  def self.activate(env_var, val = nil); end
  def self.artifact_path(filename); end
  def self.asset_path(filename); end
  def self.config; end
  def self.configure; end
  def self.create_artifact_dir; end
  def self.minitest?; end
  def self.notify_spring_activate(env_var); end
  def self.notify_spring_detected; end
  def self.now; end
  def self.require(gem_name, msg = nil); end
  def self.rspec?; end
  def self.with_report_suffix(path); end
  def self.with_timestamps(path); end
end
module TestProf::Logging
  def build_log_msg(level, msg); end
  def colorize(level, msg); end
  def log(level, msg); end
end
module TestProf::Utils
  def self.supported_version?(gem_version, at_least, at_most); end
  def self.verify_gem_version(gem_name, at_least: nil, at_most: nil); end
end
module TestProf::RubyProf
  def self.check_ruby_prof_version; end
  def self.config; end
  def self.configure; end
  def self.exclude_common_methods(profiler); end
  def self.exclude_rspec_methods(profiler); end
  def self.init_ruby_prof; end
  def self.locked?; end
  def self.profile; end
  def self.run; end
end
class TestProf::RubyProf::Configuration
  def custom_exclusions; end
  def custom_exclusions=(arg0); end
  def exclude_common_methods; end
  def exclude_common_methods=(arg0); end
  def exclude_common_methods?; end
  def include_threads; end
  def include_threads=(arg0); end
  def include_threads?; end
  def initialize; end
  def min_percent; end
  def min_percent=(arg0); end
  def mode; end
  def mode=(arg0); end
  def printer; end
  def printer=(arg0); end
  def resolve_printer; end
  def test_prof_exclusions_enabled; end
  def test_prof_exclusions_enabled=(arg0); end
  def test_prof_exclusions_enabled?; end
end
class TestProf::RubyProf::Report
  def build_path(name, printer); end
  def config; end
  def dump(name); end
  def initialize(profiler); end
  include TestProf::Logging
end
module TestProf::StackProf
  def self.build_path(name); end
  def self.check_stack_prof_version; end
  def self.config; end
  def self.configure; end
  def self.dump(name); end
  def self.dump_html_report(path); end
  def self.dump_json_report(path); end
  def self.init_stack_prof; end
  def self.locked?; end
  def self.profile(name = nil); end
  def self.run; end
end
class TestProf::StackProf::Configuration
  def boot?; end
  def format; end
  def format=(arg0); end
  def initialize; end
  def interval; end
  def interval=(arg0); end
  def mode; end
  def mode=(arg0); end
  def raw; end
  def raw=(arg0); end
  def raw?; end
  def suite?; end
  def target; end
  def target=(arg0); end
end
module TestProf::RSpecStamp
  def self.apply_tags(code, lines, tags); end
  def self.config; end
  def self.configure; end
  def self.quote(str); end
  def self.stamp_example(example, tags); end
end
module TestProf::RSpecStamp::Parser
  def self.parse(code); end
  def self.parse_arg(res, arg); end
  def self.parse_const(expr); end
  def self.parse_hash(res, hash_arg); end
  def self.parse_literal(expr); end
  def self.parse_value(expr); end
end
class TestProf::RSpecStamp::Parser::Result
  def add_htag(k, v); end
  def add_tag(v); end
  def desc; end
  def desc=(arg0); end
  def desc_const; end
  def desc_const=(arg0); end
  def fname; end
  def fname=(arg0); end
  def htags; end
  def remove_tag(tag); end
  def tags; end
end
class TestProf::RSpecStamp::Configuration
  def dry_run; end
  def dry_run=(arg0); end
  def dry_run?; end
  def ignore_files; end
  def ignore_files=(arg0); end
  def initialize; end
  def parse_tags(str); end
  def tags; end
  def tags=(val); end
end
class TestProf::RSpecStamp::Stamper
  def dry_run?; end
  def failed; end
  def ignored; end
  def ignored?(file); end
  def initialize; end
  def stamp_file(file, lines); end
  def total; end
  include TestProf::Logging
end
module TestProf::EventProf
  def self.build(event = nil); end
  def self.config; end
  def self.configure; end
  def self.instrumenter; end
  def self.monitor(mod, event, *mids, **kwargs); end
end
class TestProf::EventProf::Profiler
  def absolute_run_time; end
  def count; end
  def event; end
  def example_count; end
  def example_finished(id); end
  def example_started(id); end
  def example_time; end
  def group_finished(id); end
  def group_started(id); end
  def initialize(event:, instrumenter:, rank_by: nil, top_count: nil, per_example: nil); end
  def per_example; end
  def per_example?; end
  def rank_by; end
  def reset_example!; end
  def reset_group!; end
  def results; end
  def take_time(start_ts); end
  def time; end
  def top_count; end
  def total_count; end
  def total_time; end
  def track(time); end
end
class TestProf::EventProf::ProfilersGroup
  def each(&block); end
  def events; end
  def example_finished(id); end
  def example_started(id); end
  def group_finished(id); end
  def group_started(id); end
  def initialize(event:, **options); end
  def profilers; end
end
module TestProf::EventProf::Instrumentations
end
module TestProf::EventProf::Instrumentations::ActiveSupport
  def self.instrument(event); end
  def self.subscribe(event); end
end
module TestProf::EventProf::Monitor
  def self.call(mod, event, *mids, guard: nil, top_level: nil); end
end
class TestProf::EventProf::Monitor::BaseTracker
  def event; end
  def initialize(event); end
  def track; end
end
class TestProf::EventProf::Monitor::TopLevelTracker < TestProf::EventProf::Monitor::BaseTracker
  def id; end
  def initialize(event); end
  def track; end
end
class TestProf::Utils::SizedOrderedSet
  def <<(item); end
  def comparator; end
  def data; end
  def each(&block); end
  def initialize(max_size, sort_by: nil, &block); end
  def max_size; end
  def size; end
  def to_a; end
  include Enumerable
end
module TestProf::FactoryBotStrategy
end
module TestProf::EventProf::CustomEvents
  def self.activate_all(events); end
  def self.register(event, &block); end
  def self.registrations; end
  def self.try_activate(event); end
end
class TestProf::EventProf::Configuration
  def event; end
  def event=(arg0); end
  def initialize; end
  def instrumenter; end
  def instrumenter=(arg0); end
  def per_example; end
  def per_example=(arg0); end
  def per_example?; end
  def rank_by; end
  def rank_by=(arg0); end
  def resolve_instrumenter; end
  def stamp?; end
  def top_count; end
  def top_count=(arg0); end
end
module TestProf::FactoryDoctor
  def self.config; end
  def self.configure; end
  def self.count; end
  def self.ignore!; end
  def self.ignore; end
  def self.ignore?; end
  def self.init; end
  def self.queries_count; end
  def self.reset!; end
  def self.result; end
  def self.running?; end
  def self.stamp?; end
  def self.start; end
  def self.stop; end
  def self.subscribe!; end
  def self.time; end
  def self.within_factory(strategy); end
  def self.within_factory?; end
end
module TestProf::FactoryDoctor::FactoryBotPatch
  def run(strategy = nil); end
end
module TestProf::FactoryDoctor::FabricationPatch
  def create(*arg0); end
end
class TestProf::FactoryDoctor::Result
  def bad?; end
  def count; end
  def initialize(count, time, queries_count); end
  def queries_count; end
  def time; end
end
class TestProf::FactoryDoctor::Configuration
  def event; end
  def event=(arg0); end
  def initialize; end
  def threshold; end
  def threshold=(arg0); end
end
module TestProf::FactoryProf
  def self.config; end
  def self.configure; end
  def self.flush_stack; end
  def self.init; end
  def self.reset!; end
  def self.result; end
  def self.run; end
  def self.running?; end
  def self.start; end
  def self.stop; end
  def self.track(factory); end
end
module TestProf::FactoryProf::Printers
end
module TestProf::FactoryProf::Printers::Simple
  def self.dump(result); end
end
module TestProf::Utils::HTMLBuilder
  def self.generate(data:, template:, output:); end
end
module TestProf::FactoryProf::Printers::Flamegraph
  def self.convert_stacks(result); end
  def self.dump(result); end
end
module TestProf::FactoryProf::FactoryBotPatch
  def run(strategy = nil); end
end
module TestProf::FactoryProf::FactoryBuilders
end
class TestProf::FactoryProf::FactoryBuilders::FactoryBot
  def self.patch; end
  def self.track(strategy, factory, &block); end
end
module TestProf::FactoryProf::FabricationPatch
  def create(name, overrides = nil); end
end
class TestProf::FactoryProf::FactoryBuilders::Fabrication
  def self.patch; end
  def self.track(factory, &block); end
end
class TestProf::FactoryProf::Configuration
  def flamegraph?; end
  def initialize; end
  def mode; end
  def mode=(arg0); end
end
class TestProf::FactoryProf::Result
  def initialize(stacks, raw_stats); end
  def raw_stats; end
  def sorted_stats(key); end
  def stacks; end
  def stats; end
  def total_count; end
  def total_time; end
end
module TestProf::TagProf
end
class TestProf::TagProf::Result
  def data; end
  def events; end
  def initialize(tag, events = nil); end
  def tag; end
  def to_json(*args); end
  def track(tag, time:, events: nil); end
end
module TestProf::FloatDuration
end
module TestProf::TagProf::Printers
end
module TestProf::TagProf::Printers::Simple
  def self.dump(result); end
end
module TestProf::TagProf::Printers::HTML
  def self.dump(result); end
end
module TestProf::StringTruncate
end
module TestProf::RSpecDissect
  def self.config; end
  def self.configure; end
  def self.init; end
  def self.memoization_available?; end
  def self.meta_for(key); end
  def self.reset!; end
  def self.time_for(key); end
  def self.total_time_for(key); end
  def self.track(type, meta = nil); end
end
module TestProf::RSpecDissect::Collectors
end
class TestProf::RSpecDissect::Collectors::Base
  def <<(data); end
  def initialize(name:, top_count:); end
  def name; end
  def populate!(data); end
  def print_group_result(group); end
  def print_name; end
  def print_result_header; end
  def print_results; end
  def results; end
  def top_count; end
  def total_time; end
  def total_time_message; end
end
class TestProf::RSpecDissect::Collectors::Let < TestProf::RSpecDissect::Collectors::Base
  def initialize(params); end
  def populate!(data); end
  def print_group_result(group); end
  def print_results; end
end
class TestProf::RSpecDissect::Collectors::Before < TestProf::RSpecDissect::Collectors::Base
  def initialize(params); end
  def print_name; end
end
module TestProf::RSpecDissect::ExampleInstrumentation
  def run_before_example(*arg0); end
end
module TestProf::RSpecDissect::MemoizedInstrumentation
  def fetch_or_store(id, *arg1); end
end
class TestProf::RSpecDissect::Configuration
  def before?; end
  def initialize; end
  def let?; end
  def let_stats_enabled; end
  def let_stats_enabled=(arg0); end
  def let_stats_enabled?; end
  def let_top_count; end
  def let_top_count=(arg0); end
  def mode; end
  def stamp?; end
  def top_count; end
  def top_count=(arg0); end
end
module TestProf::FactoryAllStub
  def self.disable!; end
  def self.enable!; end
  def self.enabled?; end
  def self.init; end
end
module TestProf::FactoryAllStub::FactoryBotPatch
  def run(_strategy = nil); end
end
class TestProf::Configuration
  def color; end
  def color=(arg0); end
  def color?; end
  def initialize; end
  def output; end
  def output=(arg0); end
  def output_dir; end
  def output_dir=(arg0); end
  def report_suffix; end
  def report_suffix=(arg0); end
  def timestamps; end
  def timestamps=(arg0); end
  def timestamps?; end
end
