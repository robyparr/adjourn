# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/clockwork/all/clockwork.rbi
#
# clockwork-2.0.4

module Clockwork
  def self.included(klass); end
  def self.manager; end
  def self.manager=(manager); end
  extend Clockwork::Methods
end
class Clockwork::At
  def ==(other); end
  def hour; end
  def hour=(arg0); end
  def initialize(min, hour = nil, wday = nil); end
  def min; end
  def min=(arg0); end
  def ready?(t); end
  def self.parse(at); end
  def valid?; end
  def wday; end
  def wday=(arg0); end
end
class Clockwork::At::FailedToParse < StandardError
end
class Clockwork::Event
  def convert_timezone(t); end
  def elapsed_ready?(t); end
  def execute; end
  def initialize(manager, period, job, block, options = nil); end
  def job; end
  def job=(arg0); end
  def last; end
  def last=(arg0); end
  def run(t); end
  def run_at?(t); end
  def run_if?(t); end
  def run_now?(t); end
  def thread?; end
  def to_s; end
  def validate_if_option(if_option); end
end
class Clockwork::Manager
  def config; end
  def configure; end
  def default_configuration; end
  def error_handler(&block); end
  def events_to_run(t); end
  def every(period, job = nil, options = nil, &block); end
  def every_with_multiple_times(period, job, options = nil, &block); end
  def fire_callbacks(event, *args); end
  def graceful_shutdown; end
  def handle_error(e); end
  def handle_signal(sig); end
  def handler(&block); end
  def initialize; end
  def log(msg); end
  def log_error(e); end
  def logger; end
  def on(event, options = nil, &block); end
  def register(period, job, block, options); end
  def run; end
  def run_tick_loop; end
  def shutdown; end
  def stop_tick_loop; end
  def thread_available?; end
  def tick(t = nil); end
  def wait_tick_loop_finishes; end
end
class Clockwork::Manager::NoHandlerDefined < RuntimeError
end
module Clockwork::Methods
  def clear!; end
  def configure(&block); end
  def error_handler(&block); end
  def every(period, job, options = nil, &block); end
  def handler(&block); end
  def on(event, options = nil, &block); end
  def run; end
end
