# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: ignore
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/pg_search/all/pg_search.rbi
#
# pg_search-2.3.2

module PgSearch
  def multisearch_options; end
  def multisearch_options=(obj); end
  def self.disable_multisearch; end
  def self.included(base); end
  def self.multisearch(*args); end
  def self.multisearch_enabled?; end
  def self.multisearch_options; end
  def self.multisearch_options=(obj); end
  def self.unaccent_function; end
  def self.unaccent_function=(obj); end
  def unaccent_function; end
  def unaccent_function=(obj); end
end
class PgSearch::Configuration
  def assert_valid_options(options); end
  def associated_columns; end
  def associations; end
  def columns; end
  def default_options; end
  def feature_options; end
  def features; end
  def ignore; end
  def initialize(options, model); end
  def model; end
  def options; end
  def order_within_rank; end
  def query; end
  def ranking_sql; end
  def regular_columns; end
  def self.alias(*strings); end
end
class PgSearch::Configuration::Association
  def columns; end
  def initialize(model, name, column_names); end
  def join(primary_key); end
  def relation(primary_key); end
  def selects; end
  def selects_for_multiple_association; end
  def selects_for_singular_association; end
  def singular_association?; end
  def subselect_alias; end
  def table_name; end
end
class PgSearch::Configuration::Column
  def column_name; end
  def expression; end
  def full_name; end
  def initialize(column_name, weight, model); end
  def name; end
  def table_name; end
  def to_sql; end
  def weight; end
end
class PgSearch::Configuration::ForeignColumn < PgSearch::Configuration::Column
  def alias; end
  def expression; end
  def initialize(column_name, weight, model, association); end
  def table_name; end
  def weight; end
end
module PgSearch::Features
end
class PgSearch::Features::Feature
  def all_columns; end
  def columns; end
  def connection(**, &&); end
  def document; end
  def initialize(query, options, all_columns, model, normalizer); end
  def model; end
  def normalize(expression); end
  def normalizer; end
  def options; end
  def query; end
  def quoted_table_name(**, &&); end
  def self.valid_options; end
end
class PgSearch::Features::DMetaphone
  def conditions; end
  def initialize(query, options, columns, model, normalizer); end
  def rank; end
  def tsearch; end
end
class PgSearch::Features::DMetaphone::Normalizer
  def add_normalization(original_sql); end
  def initialize(normalizer_to_wrap); end
  def normalizer_to_wrap; end
end
class PgSearch::Features::Trigram < PgSearch::Features::Feature
  def conditions; end
  def infix_operator; end
  def normalized_document; end
  def normalized_query; end
  def rank; end
  def self.valid_options; end
  def similarity; end
  def similarity_function; end
  def word_similarity?; end
end
class PgSearch::Features::TSearch < PgSearch::Features::Feature
  def arel_wrap(sql_string); end
  def column_to_tsvector(search_column); end
  def columns_to_use; end
  def conditions; end
  def deprecated_headline_options; end
  def dictionary; end
  def headline_options; end
  def highlight; end
  def normalization; end
  def rank; end
  def self.valid_options; end
  def ts_headline; end
  def ts_headline_option_value(value); end
  def ts_headline_options; end
  def tsdocument; end
  def tsearch_rank; end
  def tsquery; end
  def tsquery_for_term(unsanitized_term); end
end
module PgSearch::Model
  def method_missing(symbol, *args); end
  def respond_to_missing?(symbol, *args); end
  extend ActiveSupport::Concern
end
module PgSearch::Model::ClassMethods
  def multisearchable(options = nil); end
  def pg_search_scope(name, options); end
end
module PgSearch::Multisearch
  def self.rebuild(model, clean_up = nil); end
end
class PgSearch::Multisearch::Rebuilder
  def additional_attributes?; end
  def base_model_name; end
  def columns; end
  def conditional?; end
  def connection; end
  def content_expressions; end
  def current_time; end
  def documents_table; end
  def dynamic?; end
  def initialize(model, time_source = nil); end
  def model; end
  def model_name; end
  def model_table; end
  def primary_key; end
  def rebuild; end
  def rebuild_sql; end
  def rebuild_sql_template; end
  def replacements; end
  def sti_clause; end
end
class PgSearch::Multisearch::ModelNotMultisearchable < StandardError
  def initialize(model_class); end
  def message; end
end
module PgSearch::Multisearchable
  def create_or_update_pg_search_document; end
  def pg_search_document_attrs; end
  def searchable_text; end
  def self.included(mod); end
  def should_update_pg_search_document?; end
  def update_pg_search_document; end
end
class PgSearch::Normalizer
  def add_normalization(sql_expression); end
  def config; end
  def initialize(config); end
end
class PgSearch::ScopeOptions
  def apply(scope); end
  def conditions; end
  def config; end
  def connection(**, &&); end
  def feature_for(feature_name); end
  def feature_options; end
  def include_table_aliasing_for_rank(scope); end
  def initialize(config); end
  def model; end
  def order_within_rank; end
  def primary_key; end
  def quoted_table_name(**, &&); end
  def rank; end
  def rank_join(rank_table_alias); end
  def subquery; end
  def subquery_join; end
end
module PgSearch::ScopeOptions::WithPgSearchHighlight
  def highlight; end
  def pg_search_highlight_field; end
  def self.[](tsearch); end
  def tsearch; end
  def with_pg_search_highlight; end
end
module PgSearch::ScopeOptions::WithPgSearchRank
  def with_pg_search_rank; end
end
module PgSearch::ScopeOptions::PgSearchRankTableAliasing
  def increment_counter; end
  def pg_search_rank_table_alias(include_counter = nil); end
end
class PgSearch::Railtie < Rails::Railtie
end
class PgSearch::PgSearchRankNotSelected < StandardError
  def message; end
end
class PgSearch::PgSearchHighlightNotSelected < StandardError
  def message; end
end
