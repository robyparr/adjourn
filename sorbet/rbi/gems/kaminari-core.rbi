# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/kaminari-core/all/kaminari-core.rbi
#
# kaminari-core-1.2.1

module Kaminari
  def self.config; end
  def self.configure; end
  def self.paginate_array(array, limit: nil, offset: nil, total_count: nil, padding: nil); end
end
class Kaminari::Config
  def default_per_page; end
  def default_per_page=(arg0); end
  def initialize; end
  def left; end
  def left=(arg0); end
  def max_pages; end
  def max_pages=(arg0); end
  def max_per_page; end
  def max_per_page=(arg0); end
  def outer_window; end
  def outer_window=(arg0); end
  def page_method_name; end
  def page_method_name=(arg0); end
  def param_name; end
  def param_name=(arg0); end
  def params_on_first_page; end
  def params_on_first_page=(arg0); end
  def right; end
  def right=(arg0); end
  def window; end
  def window=(arg0); end
end
class Kaminari::ZeroPerPageOperation < ZeroDivisionError
end
module Kaminari::Helpers
end
class Kaminari::Helpers::Tag
  def initialize(template, params: nil, param_name: nil, theme: nil, views_prefix: nil, **options); end
  def page_url_for(page); end
  def params_for(page); end
  def partial_path; end
  def to_s(locals = nil); end
end
module Kaminari::Helpers::Link
  def page; end
  def to_s(locals = nil); end
  def url; end
end
class Kaminari::Helpers::Page < Kaminari::Helpers::Tag
  def page; end
  def to_s(locals = nil); end
  include Kaminari::Helpers::Link
end
class Kaminari::Helpers::FirstPage < Kaminari::Helpers::Tag
  def page; end
  include Kaminari::Helpers::Link
end
class Kaminari::Helpers::LastPage < Kaminari::Helpers::Tag
  def page; end
  include Kaminari::Helpers::Link
end
class Kaminari::Helpers::PrevPage < Kaminari::Helpers::Tag
  def initialize(template, params: nil, param_name: nil, theme: nil, views_prefix: nil, **options); end
  def page; end
  include Kaminari::Helpers::Link
end
class Kaminari::Helpers::NextPage < Kaminari::Helpers::Tag
  def initialize(template, params: nil, param_name: nil, theme: nil, views_prefix: nil, **options); end
  def page; end
  include Kaminari::Helpers::Link
end
class Kaminari::Helpers::Gap < Kaminari::Helpers::Tag
end
class Kaminari::Helpers::Paginator < Kaminari::Helpers::Tag
  def each_page; end
  def each_relevant_page; end
  def first_page_tag; end
  def gap_tag; end
  def initialize(template, window: nil, outer_window: nil, left: nil, right: nil, inner_window: nil, **options); end
  def last_page_tag; end
  def method_missing(name, *args, &block); end
  def next_page_tag; end
  def page_tag(page); end
  def prev_page_tag; end
  def relevant_pages(options); end
  def render(&block); end
  def to_s; end
end
class Kaminari::Helpers::Paginator::PageProxy
  def +(other); end
  def -(other); end
  def <=>(other); end
  def current?; end
  def display_tag?; end
  def first?; end
  def initialize(options, page, last); end
  def inside_window?; end
  def last?; end
  def left_outer?; end
  def next?; end
  def number; end
  def out_of_range?; end
  def prev?; end
  def rel; end
  def right_outer?; end
  def single_gap?; end
  def to_i; end
  def to_s; end
  def was_truncated?; end
  include Comparable
end
module Kaminari::PageScopeMethods
  def current_page; end
  def current_per_page; end
  def first_page?; end
  def last_page?; end
  def max_paginates_per(new_max_per_page); end
  def next_page; end
  def out_of_range?; end
  def padding(num); end
  def per(num, max_per_page: nil); end
  def prev_page; end
  def total_pages; end
end
module Kaminari::ConfigurationMethods
  extend ActiveSupport::Concern
end
module Kaminari::ConfigurationMethods::ClassMethods
  def default_per_page; end
  def max_pages(val = nil); end
  def max_pages_per(val); end
  def max_paginates_per(val); end
  def max_per_page; end
  def paginates_per(val); end
end
class Kaminari::PaginatableArray < Array
  def entry_name(options = nil); end
  def initialize(original_array = nil, limit: nil, offset: nil, total_count: nil, padding: nil); end
  def limit(num); end
  def limit_value; end
  def limit_value=(arg0); end
  def offset(num); end
  def offset_value; end
  def offset_value=(arg0); end
  def page(num = nil); end
  def total_count; end
  include Kaminari::ConfigurationMethods::ClassMethods
end
class Kaminari::Railtie < Rails::Railtie
end
class Kaminari::Engine < Rails::Engine
end
module Kaminari::Helpers::UrlHelper
  def next_page_path(scope, options = nil); end
  def next_page_url(scope, options = nil); end
  def path_to_next_page(scope, options = nil); end
  def path_to_next_url(scope, options = nil); end
  def path_to_prev_page(scope, options = nil); end
  def path_to_previous_page(scope, options = nil); end
  def prev_page_path(scope, options = nil); end
  def prev_page_url(scope, options = nil); end
  def previous_page_path(scope, options = nil); end
  def previous_page_url(scope, options = nil); end
  def url_to_prev_page(scope, options = nil); end
  def url_to_previous_page(scope, options = nil); end
end
module Kaminari::Helpers::HelperMethods
  def link_to_next_page(scope, name, **options); end
  def link_to_prev_page(scope, name, **options); end
  def link_to_previous_page(scope, name, **options); end
  def page_entries_info(collection, entry_name: nil); end
  def paginate(scope, paginator_class: nil, template: nil, **options); end
  def rel_next_prev_link_tags(scope, options = nil); end
  include Kaminari::Helpers::UrlHelper
end
