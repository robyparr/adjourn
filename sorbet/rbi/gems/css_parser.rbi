# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/css_parser/all/css_parser.rbi
#
# css_parser-1.7.1

module CssParser
  def self.calculate_specificity(selector); end
  def self.convert_uris(css, base_uri); end
  def self.merge(*rule_sets); end
  def self.regex_possible_values(*values); end
  def self.sanitize_media_query(raw); end
end
class CssParser::RuleSet
  def [](property); end
  def []=(property, value); end
  def add_declaration!(property, value); end
  def create_background_shorthand!; end
  def create_border_shorthand!; end
  def create_dimensions_shorthand!; end
  def create_font_shorthand!; end
  def create_list_style_shorthand!; end
  def create_shorthand!; end
  def create_shorthand_properties!(properties, shorthand_property); end
  def declarations_to_s(options = nil); end
  def each_declaration; end
  def each_selector(options = nil); end
  def expand_background_shorthand!; end
  def expand_border_shorthand!; end
  def expand_dimensions_shorthand!; end
  def expand_font_shorthand!; end
  def expand_list_style_shorthand!; end
  def expand_shorthand!; end
  def extract_background_size_from(value); end
  def get_value(property); end
  def initialize(selectors, block, specificity = nil); end
  def parse_declarations!(block); end
  def parse_selectors!(selectors); end
  def remove_declaration!(property); end
  def selectors; end
  def specificity; end
  def specificity=(arg0); end
  def split_declaration(src, dest, v); end
  def to_s; end
end
class CssParser::OffsetAwareRuleSet < CssParser::RuleSet
  def filename; end
  def filename=(arg0); end
  def initialize(filename, offset, selectors, block, specificity = nil); end
  def offset; end
end
class CssParser::RemoteFileError < IOError
end
class CssParser::CircularReferenceError < StandardError
end
class CssParser::Parser
  def [](selector, media_types = nil); end
  def add_block!(block, options = nil); end
  def add_rule!(selectors, declarations, media_types = nil); end
  def add_rule_set!(ruleset, media_types = nil); end
  def add_rule_with_offsets!(selectors, declarations, filename, offset, media_types = nil); end
  def circular_reference_check(path); end
  def cleanup_block(block, options = nil); end
  def compact!; end
  def css_node_to_h(hash, key, val); end
  def each_rule_set(media_types = nil); end
  def each_selector(all_media_types = nil, options = nil); end
  def find_by_selector(selector, media_types = nil); end
  def find_rule_sets(selectors, media_types = nil); end
  def get_folded_declaration(block_hash); end
  def ignore_pattern(css, regex, options); end
  def initialize(options = nil); end
  def load_file!(file_name, options = nil, deprecated = nil); end
  def load_string!(src, options = nil, deprecated = nil); end
  def load_uri!(uri, options = nil, deprecated = nil); end
  def loaded_uris; end
  def parse_block_into_rule_sets!(block, options = nil); end
  def read_remote_file(uri); end
  def remove_rule_set!(ruleset, media_types = nil); end
  def reset!; end
  def rules_by_media_query; end
  def save_folded_declaration(block_hash, folded_declaration); end
  def self.folded_declaration_cache; end
  def to_h(which_media = nil); end
  def to_s(which_media = nil); end
end
